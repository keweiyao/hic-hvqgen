#!/usr/bin/env python3
import subprocess, sys
from multiprocessing import Pool, cpu_count
import numpy as np

def afterburner(Nstart, Nstop):
	for index in range(Nstart, Nstop):
		subprocess.call('run_urqmd urqmd_input_{:03d} urqmd_output_{:03d}'.format(index, index), shell=True)

def main():
	nsamples = int(sys.argv[1])
	# step 1: combine soft and hard particles and split into n-oversamples
	subprocess.call('convert_format {} particles_in.dat c-meson-frzout.dat'.format(nsamples), shell=True)
	# step 2: split these n-oversamples into separate files
	subprocess.call('csplit --elide-empty-files --digits=3 --quiet --prefix=urqmd_input_ urqmd_input.dat "/UQMD/" "{*}" ', shell=True)
	# step 3: parallely run each oversamples:
	Nproc = np.min([cpu_count()-1 or 1, 6, nsamples])
	Nstep = np.floor(nsamples*1./Nproc).astype(int)
	Nstart = (np.array(range(Nproc))*Nstep).astype(int)
	Nstop = Nstart + Nstep
	Nstop[-1] = nsamples
	print("# start index", Nstart)
	print("# stop index", Nstop)
	with Pool(Nproc) as pool:
		pool.starmap(afterburner, zip(Nstart, Nstop))
	# step 4: combine all outputs together
	subprocess.call('cat urqmd_output_* > particles_out.dat', shell=True)
	# step 5: clean up
	subprocess.call('rm -v urqmd_output_* urqmd_input_* urqmd_input.dat', shell=True)


if __name__ == "__main__":
	main()
